{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","term","results","gridSpace","onChange","event","_this","setState","target","value","onSubmit","preventDefault","axios","get","concat","replace","then","res","data","react_default","a","createElement","className","this","map","result","index","key","trackId","href","trackViewUrl","rel","src","artworkUrl100","alt","trackName","artistName","collectionName","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAsFeA,6MAhFXC,MAAQ,CACJC,KAAM,GACNC,QAAS,GACTC,UAAW,KAIfC,SAAW,SAACC,GACRC,EAAKC,SAAS,CACVN,KAAMI,EAAMG,OAAOC,WAK3BC,SAAW,SAACL,GACRA,EAAMM,iBACNC,IAAMC,IAAN,4EAAAC,OAAsFR,EAAKN,MAAMC,KAAKc,QAAQ,KAAK,KAAnH,gCACCC,KAAK,SAAAC,GACFX,EAAKC,SAAS,CACVL,QAASe,EAAIC,KAAKhB,QAClBC,UAAWG,EAAKN,MAAMG,UAAY,+EAO9C,OAEAgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,2BAEAF,EAAAC,EAAAC,cAAA,QAAMX,SAAUa,KAAKb,SAAUY,UAAU,aACrCH,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAAA,SAAOZ,MAAOc,KAAKvB,MAAMC,KAAMG,SAAUmB,KAAKnB,YAC9De,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,2BAEZF,EAAAC,EAAAC,cAAA,WARJ,mBAeJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVC,KAAKvB,MAAME,QAAQsB,IAAI,SAACC,EAAQC,GAAT,OACxBP,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAR,OAAcY,EAAd,SAA4BC,IAAKF,EAAOG,SACtDT,EAAAC,EAAAC,cAAA,KAAGQ,KAAMJ,EAAOK,aAActB,OAAO,SAASuB,IAAI,sBAAsBJ,IAAKD,GACzEP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKW,IAAKP,EAAOQ,cAAeC,IAAI,cAChCf,EAAAC,EAAAC,cAAA,WAFR,SAGWI,EAAOU,UACVhB,EAAAC,EAAAC,cAAA,WAJR,WAKaI,EAAOW,WACZjB,EAAAC,EAAAC,cAAA,WANR,UAOYI,EAAOY,8BA/DjBC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.c6f76b6c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from \"axios\";\n\nclass App extends Component {\n\n    state = {\n        term: \"\",\n        results: [],\n        gridSpace: 0\n    };\n\n    // text field\n    onChange = (event) => {\n        this.setState({\n            term: event.target.value,\n        });\n        // console.log(this.state.term);\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        axios.get(`https://cors-anywhere.herokuapp.com/https://itunes.apple.com/search?term=${this.state.term.replace(/ /g,\"+\")}&entity=musicTrack&limit=20`)\n        .then(res => {\n            this.setState({ \n                results: res.data.results,\n                gridSpace: this.state.gridSpace + 1\n             });\n            //  console.log(this.state.results);\n        });\n    }\n\n  render() {\n    return (\n\n    <div className=\"parallax\">\n\n      <div className=\"App\">\n\n        <div className=\"header\">\n\n            <div className=\"title\">\n                <h1>iTunes Search</h1>\n\n                <form onSubmit={this.onSubmit} className=\"searchBar\">\n                    <strong>Search: <input value={this.state.term} onChange={this.onChange} /></strong>\n                    <br></br>\n                    <button><strong>Search!</strong></button>\n                </form>\n                <br></br>\n                Top 20 Results\n\n            </div>\n\n        </div> \n\n        <div className=\"resultsDiv\">\n            {this.state.results.map((result, index) => \n            <div className={`card grid${index} zoom`} key={result.trackId}>\n            <a href={result.trackViewUrl} target=\"_blank\" rel=\"noopener noreferrer\" key={index}>\n                <div>\n                    <img src={result.artworkUrl100} alt=\"album art\"/>\n                        <br></br>\n                    Song: {result.trackName}\n                        <br></br>\n                    Artist: {result.artistName}\n                        <br></br>\n                    Album: {result.collectionName}\n                </div>\n                </a>\n            </div>\n            )}\n\n        </div>\n        {/* end resultsDiv */}\n\n        </div>\n        {/* end App */}\n\n    </div>\n    // end parallax\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}